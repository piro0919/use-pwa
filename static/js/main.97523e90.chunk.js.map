{"version":3,"sources":["hooks/usePwa/index.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["usePwa","beforeinstallprompt","useRef","useState","appinstalled","setAppinstalled","canInstallprompt","setCanInstallprompt","enabledA2hs","setEnabledA2hs","enabledPwa","setEnabledPwa","isPwa","setIsPwa","enabledUpdate","setEnabledUpdate","userChoice","setUserChoice","showInstallPrompt","useCallback","a","current","prompt","unregister","window","navigator","serviceWorker","getRegistration","registration","result","handleBeforeInstallPrompt","event","handleAppinstalled","useEffect","addEventListener","removeEventListener","matchMedia","matches","browser","detect","userAgent","toLowerCase","isIos","indexOf","document","name","onupdatefound","update","callback","App","handleClick","alert","String","disabled","onClick","JSON","stringify","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","register","then","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","ready","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.97523e90.chunk.js","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { detect } from \"detect-browser\";\n\ntype PromiseType<T extends Promise<any>> = T extends Promise<infer P>\n  ? P\n  : never;\n\ntype BeforeInstallPromptEvent = Event & {\n  readonly platforms: Array<string>;\n  readonly userChoice: Promise<{\n    outcome: \"accepted\" | \"dismissed\";\n    platform: string;\n  }>;\n  prompt(): Promise<void>;\n};\n\nexport type PwaData = {\n  appinstalled: boolean;\n  canInstallprompt: boolean;\n  enabledA2hs: boolean;\n  enabledPwa: boolean;\n  enabledUpdate: boolean;\n  isPwa: boolean;\n  showInstallPrompt: () => void;\n  unregister: () => Promise<boolean | undefined>;\n  userChoice?: PromiseType<BeforeInstallPromptEvent[\"userChoice\"]>;\n};\n\nfunction usePwa(): PwaData {\n  const beforeinstallprompt = useRef<BeforeInstallPromptEvent>();\n  const [appinstalled, setAppinstalled] = useState(false);\n  const [canInstallprompt, setCanInstallprompt] = useState(false);\n  const [enabledA2hs, setEnabledA2hs] = useState(false);\n  const [enabledPwa, setEnabledPwa] = useState(false);\n  const [isPwa, setIsPwa] = useState(false);\n  const [enabledUpdate, setEnabledUpdate] = useState(false);\n  const [userChoice, setUserChoice] = useState<PwaData[\"userChoice\"]>();\n  const showInstallPrompt = useCallback(async () => {\n    if (!beforeinstallprompt.current) {\n      return;\n    }\n\n    await beforeinstallprompt.current.prompt();\n\n    if (!beforeinstallprompt.current) {\n      return;\n    }\n\n    const userChoice = await beforeinstallprompt.current.userChoice;\n\n    setUserChoice(userChoice);\n  }, []);\n  const unregister = useCallback(async () => {\n    if (!(\"serviceWorker\" in window.navigator)) {\n      return;\n    }\n\n    const registration = await window.navigator.serviceWorker.getRegistration();\n\n    if (!registration) {\n      return;\n    }\n\n    const result = await registration.unregister();\n\n    return result;\n  }, []);\n  const handleBeforeInstallPrompt = useCallback<\n    (event: BeforeInstallPromptEvent) => void\n  >((event) => {\n    beforeinstallprompt.current = event;\n\n    setCanInstallprompt(true);\n  }, []);\n  const handleAppinstalled = useCallback(() => {\n    setAppinstalled(true);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\n      \"beforeinstallprompt\",\n      handleBeforeInstallPrompt as any\n    );\n\n    return () => {\n      window.removeEventListener(\n        \"beforeinstallprompt\",\n        handleBeforeInstallPrompt as any\n      );\n    };\n  }, [handleBeforeInstallPrompt]);\n\n  useEffect(() => {\n    window.addEventListener(\"appinstalled\", handleAppinstalled);\n\n    return () => {\n      window.removeEventListener(\"appinstalled\", handleAppinstalled);\n    };\n  }, [handleAppinstalled]);\n\n  useEffect(() => {\n    setEnabledPwa(\n      \"serviceWorker\" in window.navigator &&\n        \"BeforeInstallPromptEvent\" in window\n    );\n  }, []);\n\n  useEffect(() => {\n    setIsPwa(\n      \"standalone\" in window.navigator ||\n        window.matchMedia(\"(display-mode: standalone)\").matches\n    );\n  }, []);\n\n  useEffect(() => {\n    const browser = detect();\n\n    if (!browser) {\n      return;\n    }\n\n    const userAgent = window.navigator.userAgent.toLowerCase();\n    const isIos =\n      userAgent.indexOf(\"iphone\") >= 0 ||\n      userAgent.indexOf(\"ipad\") >= 0 ||\n      (userAgent.indexOf(\"macintosh\") >= 0 && \"ontouchend\" in document);\n    const { name } = browser;\n\n    setEnabledA2hs(isIos && name === \"ios\");\n  }, []);\n\n  useEffect(() => {\n    const callback = async () => {\n      if (!(\"serviceWorker\" in window.navigator)) {\n        return;\n      }\n\n      const registration = await window.navigator.serviceWorker.getRegistration();\n\n      if (!registration) {\n        return;\n      }\n\n      registration.onupdatefound = async () => {\n        await registration.update();\n\n        setEnabledUpdate(true);\n      };\n    };\n\n    callback();\n  }, []);\n\n  return {\n    appinstalled,\n    canInstallprompt,\n    enabledA2hs,\n    enabledUpdate,\n    enabledPwa,\n    isPwa,\n    showInstallPrompt,\n    unregister,\n    userChoice,\n  };\n}\n\nexport default usePwa;\n","import usePwa from \"hooks/usePwa\";\nimport { FC, useCallback } from \"react\";\n\nconst App: FC = () => {\n  const {\n    appinstalled,\n    canInstallprompt,\n    enabledA2hs,\n    enabledPwa,\n    enabledUpdate,\n    isPwa,\n    showInstallPrompt,\n    unregister,\n    userChoice,\n  } = usePwa();\n  const handleClick = useCallback(async () => {\n    const result = await unregister();\n\n    alert(String(result));\n  }, [unregister]);\n\n  return (\n    <div>\n      {enabledPwa ? (\n        <button\n          disabled={!canInstallprompt || appinstalled}\n          onClick={showInstallPrompt}\n        >\n          Install Pwa\n        </button>\n      ) : (\n        \"Not compatible with pwa.\"\n      )}\n      <br />\n      {enabledUpdate && isPwa ? (\n        <button onClick={handleClick}>Update Pwa</button>\n      ) : (\n        \"Update does not exist.\"\n      )}\n      <hr />\n      <div>\n        {`appinstalled: ${appinstalled}`}\n        <br />\n        {`canInstallprompt: ${canInstallprompt}`}\n        <br />\n        {`enabledA2hs: ${enabledA2hs}`}\n        <br />\n        {`enabledPwa: ${enabledPwa}`}\n        <br />\n        {`enabledUpdate: ${enabledUpdate}`}\n        <br />\n        {`isPwa: ${isPwa}`}\n        <br />\n        {`userChoice: ${JSON.stringify(userChoice)}`}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}