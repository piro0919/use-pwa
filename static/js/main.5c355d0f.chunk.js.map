{"version":3,"sources":["hooks/usePwa/index.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["usePwa","beforeinstallprompt","useRef","useState","userChoice","setUserChoice","enabledPwa","setEnabledPwa","isPwa","setIsPwa","canInstallprompt","setCanInstallprompt","handleClickOnInstallPrompt","useCallback","current","prompt","then","handleBeforeInstallPrompt","event","appinstalled","setAppinstalled","handleAppinstalled","useEffect","window","addEventListener","removeEventListener","navigator","matchMedia","matches","App","disabled","onClick","JSON","stringify","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.5c355d0f.chunk.js","sourcesContent":["import {\n  ComponentPropsWithoutRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\ntype PromiseType<T extends Promise<any>> = T extends Promise<infer P>\n  ? P\n  : never;\n\ntype BeforeInstallPromptEvent = Event & {\n  readonly platforms: Array<string>;\n  readonly userChoice: Promise<{\n    outcome: \"accepted\" | \"dismissed\";\n    platform: string;\n  }>;\n  prompt(): Promise<void>;\n};\n\nexport type Pwa = {\n  appinstalled: boolean;\n  canInstallprompt: boolean;\n  enabledPwa: boolean;\n  handleClickOnInstallPrompt: NonNullable<\n    ComponentPropsWithoutRef<\"button\">[\"onClick\"]\n  >;\n  isPwa: boolean;\n  userChoice?: PromiseType<BeforeInstallPromptEvent[\"userChoice\"]>;\n};\n\nfunction usePwa(): Pwa {\n  const beforeinstallprompt = useRef<BeforeInstallPromptEvent>();\n  const [userChoice, setUserChoice] = useState<Pwa[\"userChoice\"]>();\n  const [enabledPwa, setEnabledPwa] = useState<Pwa[\"enabledPwa\"]>(false);\n  const [isPwa, setIsPwa] = useState<Pwa[\"isPwa\"]>(false);\n  const [canInstallprompt, setCanInstallprompt] = useState<\n    Pwa[\"canInstallprompt\"]\n  >(false);\n  const handleClickOnInstallPrompt = useCallback<\n    Pwa[\"handleClickOnInstallPrompt\"]\n  >(() => {\n    if (!beforeinstallprompt.current) {\n      return;\n    }\n\n    beforeinstallprompt.current\n      .prompt()\n      .then(() => {\n        if (!beforeinstallprompt.current) {\n          return;\n        }\n\n        return beforeinstallprompt.current.userChoice;\n      })\n      .then((userChoice) => {\n        setUserChoice(userChoice);\n      });\n  }, []);\n  const handleBeforeInstallPrompt = useCallback<\n    (event: BeforeInstallPromptEvent) => void\n  >((event) => {\n    beforeinstallprompt.current = event;\n\n    setCanInstallprompt(true);\n  }, []);\n  const [appinstalled, setAppinstalled] = useState<Pwa[\"appinstalled\"]>(false);\n  const handleAppinstalled = useCallback(() => {\n    setAppinstalled(true);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\n      \"beforeinstallprompt\",\n      handleBeforeInstallPrompt as any\n    );\n\n    return () => {\n      window.removeEventListener(\n        \"beforeinstallprompt\",\n        handleBeforeInstallPrompt as any\n      );\n    };\n  }, [handleBeforeInstallPrompt]);\n\n  useEffect(() => {\n    window.addEventListener(\"appinstalled\", handleAppinstalled);\n\n    return () => {\n      window.removeEventListener(\"appinstalled\", handleAppinstalled);\n    };\n  }, [handleAppinstalled]);\n\n  useEffect(() => {\n    setEnabledPwa(\n      \"serviceWorker\" in navigator && \"BeforeInstallPromptEvent\" in window\n    );\n  }, []);\n\n  useEffect(() => {\n    setIsPwa(\n      \"standalone\" in navigator ||\n        window.matchMedia(\"(display-mode: standalone)\").matches\n    );\n  }, []);\n\n  return {\n    appinstalled,\n    canInstallprompt,\n    enabledPwa,\n    handleClickOnInstallPrompt,\n    isPwa,\n    userChoice,\n  };\n}\n\nexport default usePwa;\n","import usePwa from \"hooks/usePwa\";\nimport { FC } from \"react\";\n\nconst App: FC = () => {\n  const {\n    appinstalled,\n    canInstallprompt,\n    enabledPwa,\n    handleClickOnInstallPrompt,\n    isPwa,\n    userChoice,\n  } = usePwa();\n\n  return (\n    <div>\n      {enabledPwa ? (\n        <button\n          disabled={!canInstallprompt}\n          onClick={handleClickOnInstallPrompt}\n        >\n          Install Pwa\n        </button>\n      ) : (\n        \"Not compatible with pwa.\"\n      )}\n      <div>\n        {`appinstalled: ${appinstalled}`}\n        <br />\n        {`canInstallprompt: ${canInstallprompt}`}\n        <br />\n        {`enabledPwa: ${enabledPwa}`}\n        <br />\n        {`isPwa: ${isPwa}`}\n        <br />\n        {`userChoice: ${JSON.stringify(userChoice)}`}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}