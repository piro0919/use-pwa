{"version":3,"sources":["hooks/usePwa/index.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["usePwa","pwaParams","beforeinstallprompt","useRef","useState","appinstalled","setAppinstalled","canInstallprompt","setCanInstallprompt","enabledA2hs","setEnabledA2hs","enabledPwa","setEnabledPwa","userChoice","setUserChoice","handleClickOnInstallPrompt","useCallback","a","current","prompt","handleClickOnUnregister","window","navigator","serviceWorker","getRegistration","registration","unregister","isPwa","setIsPwa","onupdatefound","setOnupdatefound","handleBeforeInstallPrompt","event","handleAppinstalled","useEffect","addEventListener","removeEventListener","matchMedia","matches","browser","detect","userAgent","toLowerCase","isIos","indexOf","document","name","scriptURL","register","update","console","log","callback","App","disabled","onClick","JSON","stringify","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","then","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","ready","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.94e1e487.chunk.js","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { detect } from \"detect-browser\";\n\ntype PromiseType<T extends Promise<any>> = T extends Promise<infer P>\n  ? P\n  : never;\n\ntype BeforeInstallPromptEvent = Event & {\n  readonly platforms: Array<string>;\n  readonly userChoice: Promise<{\n    outcome: \"accepted\" | \"dismissed\";\n    platform: string;\n  }>;\n  prompt(): Promise<void>;\n};\n\nexport type PwaParams = {\n  scriptURL: string | URL;\n};\n\nexport type PwaData = {\n  appinstalled: boolean;\n  canInstallprompt: boolean;\n  enabledA2hs: boolean;\n  enabledPwa: boolean;\n  handleClickOnInstallPrompt: () => void;\n  handleClickOnUnregister: () => void;\n  isPwa: boolean;\n  onupdatefound: boolean;\n  userChoice?: PromiseType<BeforeInstallPromptEvent[\"userChoice\"]>;\n};\n\nfunction usePwa(pwaParams?: PwaParams): PwaData {\n  const beforeinstallprompt = useRef<BeforeInstallPromptEvent>();\n  const [appinstalled, setAppinstalled] = useState(false);\n  const [canInstallprompt, setCanInstallprompt] = useState(false);\n  const [enabledA2hs, setEnabledA2hs] = useState(false);\n  const [enabledPwa, setEnabledPwa] = useState(false);\n  const [userChoice, setUserChoice] = useState<PwaData[\"userChoice\"]>();\n  const handleClickOnInstallPrompt = useCallback(async () => {\n    if (!beforeinstallprompt.current) {\n      return;\n    }\n\n    await beforeinstallprompt.current.prompt();\n\n    if (!beforeinstallprompt.current) {\n      return;\n    }\n\n    const userChoice = await beforeinstallprompt.current.userChoice;\n\n    setUserChoice(userChoice);\n  }, []);\n  const handleClickOnUnregister = useCallback(async () => {\n    if (!(\"serviceWorker\" in window.navigator)) {\n      return;\n    }\n\n    const registration = await window.navigator.serviceWorker.getRegistration();\n\n    if (!registration) {\n      return;\n    }\n\n    await registration.unregister();\n  }, []);\n  const [isPwa, setIsPwa] = useState(false);\n  const [onupdatefound, setOnupdatefound] = useState(false);\n  const handleBeforeInstallPrompt = useCallback<\n    (event: BeforeInstallPromptEvent) => void\n  >((event) => {\n    beforeinstallprompt.current = event;\n\n    setCanInstallprompt(true);\n  }, []);\n  const handleAppinstalled = useCallback(() => {\n    setAppinstalled(true);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\n      \"beforeinstallprompt\",\n      handleBeforeInstallPrompt as any\n    );\n\n    return () => {\n      window.removeEventListener(\n        \"beforeinstallprompt\",\n        handleBeforeInstallPrompt as any\n      );\n    };\n  }, [handleBeforeInstallPrompt]);\n\n  useEffect(() => {\n    window.addEventListener(\"appinstalled\", handleAppinstalled);\n\n    return () => {\n      window.removeEventListener(\"appinstalled\", handleAppinstalled);\n    };\n  }, [handleAppinstalled]);\n\n  useEffect(() => {\n    setEnabledPwa(\n      \"serviceWorker\" in window.navigator &&\n        \"BeforeInstallPromptEvent\" in window\n    );\n  }, []);\n\n  useEffect(() => {\n    setIsPwa(\n      \"standalone\" in window.navigator ||\n        window.matchMedia(\"(display-mode: standalone)\").matches\n    );\n  }, []);\n\n  useEffect(() => {\n    const browser = detect();\n\n    if (!browser) {\n      return;\n    }\n\n    const userAgent = window.navigator.userAgent.toLowerCase();\n    const isIos =\n      userAgent.indexOf(\"iphone\") >= 0 ||\n      userAgent.indexOf(\"ipad\") >= 0 ||\n      (userAgent.indexOf(\"macintosh\") >= 0 && \"ontouchend\" in document);\n    const { name } = browser;\n\n    setEnabledA2hs(isIos && name === \"ios\");\n  }, []);\n\n  useEffect(() => {\n    const callback = async () => {\n      const { scriptURL } = pwaParams || {};\n\n      if (!scriptURL || !(\"serviceWorker\" in window.navigator)) {\n        return;\n      }\n\n      try {\n        const registration = await window.navigator.serviceWorker.register(\n          scriptURL\n        );\n\n        registration.onupdatefound = () => {\n          registration.update();\n\n          setOnupdatefound(true);\n        };\n      } catch (error) {\n        console.log(\"Registration failed with \" + error);\n      }\n    };\n\n    callback();\n  }, [pwaParams]);\n\n  return {\n    appinstalled,\n    canInstallprompt,\n    enabledA2hs,\n    enabledPwa,\n    handleClickOnInstallPrompt,\n    handleClickOnUnregister,\n    isPwa,\n    onupdatefound,\n    userChoice,\n  };\n}\n\nexport default usePwa;\n","import usePwa from \"hooks/usePwa\";\nimport { FC } from \"react\";\n\nconst App: FC = () => {\n  const {\n    appinstalled,\n    canInstallprompt,\n    enabledA2hs,\n    enabledPwa,\n    handleClickOnInstallPrompt,\n    handleClickOnUnregister,\n    isPwa,\n    onupdatefound,\n    userChoice,\n  } = usePwa({ scriptURL: \"/service-worker.js\" });\n\n  return (\n    <div>\n      {enabledPwa ? (\n        <button\n          disabled={!canInstallprompt || appinstalled}\n          onClick={handleClickOnInstallPrompt}\n        >\n          Install Pwa\n        </button>\n      ) : (\n        \"Not compatible with pwa.\"\n      )}\n      <br />\n      {onupdatefound ? (\n        <button onClick={handleClickOnUnregister}>Update Pwa</button>\n      ) : (\n        \"Update does not exist.\"\n      )}\n      <hr />\n      <div>\n        {`appinstalled: ${appinstalled}`}\n        <br />\n        {`canInstallprompt: ${canInstallprompt}`}\n        <br />\n        {`enabledA2hs: ${enabledA2hs}`}\n        <br />\n        {`enabledPwa: ${enabledPwa}`}\n        <br />\n        {`isPwa: ${isPwa}`}\n        <br />\n        {`onupdatefound: ${onupdatefound}`}\n        <br />\n        {`userChoice: ${JSON.stringify(userChoice)}`}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}