{"version":3,"sources":["hooks/usePwa/index.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["useBoolean","initialValue","useState","value","setValue","setTrue","useCallback","App","beforeinstallprompt","useRef","appinstalled","onAppinstalled","canInstallprompt","onCanInstallprompt","enabledA2hs","onEnabledA2hs","enabledPwa","onEnabledPwa","enabledUpdate","onEnabledUpdate","isPwa","onIsPwa","userChoice","setUserChoice","handleAppinstalled","handleBeforeinstallprompt","event","current","registration","setRegistration","unregister","a","result","showInstallPrompt","prompt","completed","setCompleted","isLoading","useMemo","Object","values","includes","useEffect","window","addEventListener","prevCompleted","removeEventListener","browser","detect","name","document","lownerUserAgent","navigator","userAgent","toLowerCase","serviceWorker","getRegistration","callback","onupdatefound","update","matchMedia","matches","usePwa","handleClick","alert","location","reload","disabled","onClick","JSON","stringify","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","register","then","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7164e95b.chunk.js","sourcesContent":["import { detect } from \"detect-browser\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n\nfunction useBoolean(initialValue: boolean) {\n  const [value, setValue] = useState(initialValue);\n  const setTrue = useCallback(() => setValue(true), []);\n\n  return { value, setTrue };\n}\n\ntype UserChoice = {\n  outcome: \"accepted\" | \"dismissed\";\n  platform: string;\n};\n\ntype BeforeInstallPromptEvent = Event & {\n  readonly platforms: Array<string>;\n  readonly userChoice: Promise<UserChoice>;\n  prompt(): Promise<void>;\n};\n\nexport type PwaData = {\n  appinstalled: boolean;\n  canInstallprompt: boolean;\n  enabledA2hs: boolean;\n  enabledPwa: boolean;\n  enabledUpdate: boolean;\n  isLoading: boolean;\n  isPwa: boolean;\n  showInstallPrompt: () => void;\n  unregister?: () => Promise<boolean>;\n  userChoice?: UserChoice;\n};\n\nexport default function usePwa(): PwaData {\n  const beforeinstallprompt = useRef<BeforeInstallPromptEvent>();\n  const { value: appinstalled, setTrue: onAppinstalled } = useBoolean(false);\n  const { value: canInstallprompt, setTrue: onCanInstallprompt } =\n    useBoolean(false);\n  const { value: enabledA2hs, setTrue: onEnabledA2hs } = useBoolean(false);\n  const { value: enabledPwa, setTrue: onEnabledPwa } = useBoolean(false);\n  const { value: enabledUpdate, setTrue: onEnabledUpdate } = useBoolean(false);\n  const { value: isPwa, setTrue: onIsPwa } = useBoolean(false);\n  const [userChoice, setUserChoice] = useState<UserChoice>();\n  const handleAppinstalled = useCallback(\n    () => onAppinstalled(),\n    [onAppinstalled]\n  );\n  const handleBeforeinstallprompt = useCallback<\n    (event: BeforeInstallPromptEvent) => void\n  >(\n    (event) => {\n      beforeinstallprompt.current = event;\n\n      onCanInstallprompt();\n    },\n    [onCanInstallprompt]\n  );\n  const [registration, setRegistration] = useState<ServiceWorkerRegistration>();\n  const unregister =\n    registration &&\n    (async () => {\n      const result = await registration.unregister();\n\n      return result;\n    });\n  const showInstallPrompt = useCallback(async () => {\n    const { current } = beforeinstallprompt;\n\n    if (!current) {\n      return;\n    }\n\n    await current.prompt();\n\n    const userChoice = await current.userChoice;\n\n    setUserChoice(userChoice);\n  }, []);\n  const [completed, setCompleted] = useState({\n    appinstalled: false,\n    beforeinstallprompt: false,\n    enabledA2hs: false,\n    enabledPwa: false,\n    enabledUpdate: false,\n    isPwa: false,\n  });\n  const isLoading = useMemo(\n    () => !Object.values(completed).includes(false),\n    [completed]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"appinstalled\", handleAppinstalled);\n\n    setCompleted((prevCompleted) => ({\n      ...prevCompleted,\n      appinstalled: true,\n    }));\n\n    return () => window.removeEventListener(\"keydown\", handleAppinstalled);\n  }, [handleAppinstalled]);\n\n  useEffect(() => {\n    // @ts-ignore\n    window.addEventListener(\"beforeinstallprompt\", handleBeforeinstallprompt);\n\n    setCompleted((prevCompleted) => ({\n      ...prevCompleted,\n      beforeinstallprompt: true,\n    }));\n\n    return () =>\n      // @ts-ignore\n      window.removeEventListener(\n        \"beforeinstallprompt\",\n        handleBeforeinstallprompt\n      );\n  }, [handleBeforeinstallprompt]);\n\n  useEffect(() => {\n    try {\n      const browser = detect();\n\n      if (!browser) {\n        return;\n      }\n\n      const { name } = browser;\n\n      if (name !== \"ios\") {\n        return;\n      }\n\n      const {\n        document,\n        navigator: { userAgent },\n      } = window;\n      const lownerUserAgent = userAgent.toLowerCase();\n      if (\n        !lownerUserAgent.includes(\"iphone\") &&\n        !lownerUserAgent.includes(\"ipad\") &&\n        (!lownerUserAgent.includes(\"macintosh\") || !(\"ontouchend\" in document))\n      ) {\n        return;\n      }\n\n      onEnabledA2hs();\n    } finally {\n      setCompleted((prevCompleted) => ({\n        ...prevCompleted,\n        enabledA2hs: true,\n      }));\n    }\n  }, [onEnabledA2hs]);\n\n  useEffect(() => {\n    try {\n      if (\n        !(\"serviceWorker\" in window.navigator) ||\n        !(\"BeforeInstallPromptEvent\" in window)\n      ) {\n        return;\n      }\n\n      onEnabledPwa();\n    } finally {\n      setCompleted((prevCompleted) => ({\n        ...prevCompleted,\n        enabledPwa: true,\n      }));\n    }\n  }, [onEnabledPwa]);\n\n  useEffect(() => {\n    const callback = async () => {\n      if (!(\"serviceWorker\" in window.navigator)) {\n        return;\n      }\n\n      const {\n        navigator: { serviceWorker },\n      } = window;\n      const registration = await serviceWorker.getRegistration();\n\n      setRegistration(registration);\n    };\n\n    callback();\n  }, []);\n\n  useEffect(() => {\n    const callback = async () => {\n      try {\n        if (!registration) {\n          return;\n        }\n\n        registration.onupdatefound = async () => {\n          await registration.update();\n\n          onEnabledUpdate();\n        };\n      } finally {\n        setCompleted((prevCompleted) => ({\n          ...prevCompleted,\n          enabledUpdate: true,\n        }));\n      }\n    };\n\n    callback();\n  }, [onEnabledUpdate, registration]);\n\n  useEffect(() => {\n    try {\n      if (\n        !(\"standalone\" in window.navigator) &&\n        !window.matchMedia(\"(display-mode: standalone)\").matches\n      ) {\n        return;\n      }\n\n      onIsPwa();\n    } finally {\n      setCompleted((prevCompleted) => ({\n        ...prevCompleted,\n        isPwa: true,\n      }));\n    }\n  }, [onIsPwa]);\n\n  return {\n    appinstalled,\n    canInstallprompt,\n    enabledA2hs,\n    enabledPwa,\n    enabledUpdate,\n    isLoading,\n    isPwa,\n    unregister,\n    showInstallPrompt,\n    userChoice,\n  };\n}\n","import usePwa from \"hooks/usePwa\";\nimport { FC, useCallback } from \"react\";\n\nconst App: FC = () => {\n  const {\n    appinstalled,\n    canInstallprompt,\n    enabledA2hs,\n    enabledPwa,\n    enabledUpdate,\n    isLoading,\n    isPwa,\n    showInstallPrompt,\n    unregister,\n    userChoice,\n  } = usePwa();\n  const handleClick = useCallback(async () => {\n    if (!unregister) {\n      return;\n    }\n\n    const result = await unregister();\n\n    if (!result) {\n      alert(\"Update failed.\");\n\n      return;\n    }\n\n    alert(\"The update was successful, restart the app.\");\n\n    window.location.reload();\n  }, [unregister]);\n\n  return (\n    <div>\n      {enabledPwa && !isPwa ? (\n        <button\n          disabled={!canInstallprompt || appinstalled}\n          onClick={showInstallPrompt}\n        >\n          Install Pwa\n        </button>\n      ) : (\n        \"Not compatible with pwa.\"\n      )}\n      <br />\n      {enabledUpdate && isPwa ? (\n        <button onClick={handleClick}>Update Pwa</button>\n      ) : (\n        \"Update does not exist.\"\n      )}\n      <hr />\n      <div>\n        {`appinstalled: ${appinstalled}`}\n        <br />\n        {`canInstallprompt: ${canInstallprompt}`}\n        <br />\n        {`enabledA2hs: ${enabledA2hs}`}\n        <br />\n        {`enabledPwa: ${enabledPwa}`}\n        <br />\n        {`enabledUpdate: ${enabledUpdate}`}\n        <br />\n        {`isLoading: ${isLoading}`}\n        <br />\n        {`isPwa: ${isPwa}`}\n        <br />\n        {`userChoice: ${JSON.stringify(userChoice)}`}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}